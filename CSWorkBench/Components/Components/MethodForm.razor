@using System.Reflection.Metadata
<div class="mb-3">
    <label class="form-label">@method.Name</label>
    @foreach (ParameterInfo Parameter in method.GetParameters())
    {
        <label class="form-label">@Parameter.Name (@Parameter.ParameterType.Name)</label>
        <ValueInput type=Parameter.ParameterType ValueChanged="v => parameterValues[Parameter] = v"></ValueInput>
    }
    <button class="btn btn-primary" @onclick="InvokeMethod">Invoke</button>
</div>

@code {
    [Parameter]
    public required object obj { get; set; }

    [Parameter]
    public required MethodBase method { get; set; }

    [Parameter]
    public Func<object?,Task?>? callBack { get; set; }

    public Dictionary<ParameterInfo, object?> parameterValues = new Dictionary<ParameterInfo, object?>();

    private async Task InvokeMethod()
    {
        object?[]? parameters = method.GetParameters().Select(p => parameterValues.ContainsKey(p) ? parameterValues[p] : Type.Missing).ToArray();
        object? result = method.Invoke(obj, parameters);
        if (result is Task task)
        {
            await task;
        }
        callBack?.Invoke(result);
    }
}