<div class="mb-3">
    <BSLabel>@attr.Name</BSLabel>
    @switch (attr.Type)
    {
        case Type t when t == typeof(string) || t == typeof(char):
            <input class="form-control" type="text" value="@Value" @onchange="e => Value = e.Value"></input>
            break;
        case Type t when t == typeof(int) || t == typeof(short) || t == typeof(long) || t == typeof(ushort) || t == typeof(uint)
    || t == typeof(ulong):
            <input class="form-control" type="number" value="@Value" @onchange="e => Value = Convert.ChangeType(e.Value, attr.Type)"></input>
            break;
        case Type t when t == typeof(float) || t == typeof(double) || t == typeof(decimal):
            <input class="form-control" type="number" step="any" value="@Value" @onchange="e => Value = Convert.ChangeType(e.Value, attr.Type)"></input>
            break;
        case Type t when t == typeof(bool):
            <input class="form-check-input" type="checkbox" checked="@(Value is bool b && b)" @onchange="@(e => Value = e.Value is "on")"></input>
            break;
        case Type t when t == typeof(DateTime):
            <input class="form-control" type="datetime-local" value="@(Value is DateTime dt ? dt.ToString("yyyy-MM-ddTHH:mm") : null)" @onchange="e => Value = DateTime.Parse(e.Value.ToString()!)"></input>
            break;
        case Type t when t == typeof(DateOnly):
            <input class="form-control" type="date" value="@(Value is DateOnly d ? d.ToString("yyyy-MM-dd") : null)" @onchange="e => Value = DateOnly.Parse(e.Value.ToString()!)"></input>
            break;
        case Type t when t == typeof(TimeOnly):
            <input class="form-control" type="time" value="@(Value is TimeOnly ti ? ti.ToString("HH:mm") : null)" @onchange="e => Value = TimeOnly.Parse(e.Value.ToString()!)"></input>
            break;
        case Type t when t.IsEnum:
            <select class="form-select" @onchange="e => Value = Enum.Parse(attr.Type, e.Value.ToString()!)">
                @foreach (var enumVal in Enum.GetValues(attr.Type))
                {
                    <option value="@enumVal" selected="@(enumVal.Equals(Value) ? "selected" : null)">@enumVal</option>
                }
            </select>
            break;
        case Type t when !t.IsPrimitive && !t.IsEnum:
            <div class="d-flex justify-content-center">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <button class="btn btn-outline-secondary" type="button" @onclick="NavigateToDetail"><i class="bi bi-arrow-right-circle"></i></button>
                    </div>
                </div>
            </div>
            break;
        default:
            <p>unknown</p>
            break;
    }
</div>

@code {
    [Parameter]
    public required RootObject root { get; set; }

    [Parameter]
    public required object obj { get; set; }

    [Parameter]
    public required AttrInfo attr { get; set; }

    [Parameter]
    public required Action OnModify { get; set; }

    private void NavigateToDetail()
    {
        if (Value == null) return;
        if (!attr.Type.IsPrimitive && !attr.Type.IsEnum) {
            Navigation.NavigateTo("/" + root.id + "/" + root.GetSubObjectId(Value));
        }
    }

    private object? Value
    {
        get => attr.get(obj);
        set
        {
            Console.WriteLine("modified");
            OnModify();
            attr.set(obj,value);
        }
    }
}

