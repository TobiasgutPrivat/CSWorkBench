@foreach (FieldInfo field in fields)
{
    <p>@field.Name @field.GetValue(obj)?.ToString()</p>
}
@foreach (PropertyInfo property in properties)
{
    <p>@property.Name @property.GetValue(obj)?.ToString()</p>
}
@foreach (MethodInfo method in methods)
{
    <p>@method.Name</p>
}

@code {
    [Parameter]
    public required object obj { get; set; }

    [Parameter]
    public required Action markModified { get; set; }

    public List<FieldInfo> fields = [];
    public List<PropertyInfo> properties = [];
    public List<MethodInfo> methods = [];

    protected override void OnInitialized()
    {
        // get reflection info
        Type type = obj.GetType();
        fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance).ToList();
        properties = type.GetProperties(BindingFlags.Public | BindingFlags.Instance).ToList();
        methods = type.GetMethods(BindingFlags.Public | BindingFlags.Instance).Where(m => !m.IsSpecialName && m.DeclaringType !=
        typeof(object)).ToList();
    }
}